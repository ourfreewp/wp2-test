<?php
namespace WP2_Test\CLI;

if ( ! class_exists( 'WP_CLI_Command' ) ) {
	return;
}
/**
 * Generates a PHP stub file for IDE autocompletion.
 */
class Generate_Stubs extends \WP_CLI_Command {
	/**
	 * Creates a PHP stub file for better IDE integration.
	 *
	 * This helps static analysis tools understand WordPress functions that
	 * are not normally defined in the global scope.
	 *
	 * ## EXAMPLES
	 *
	 * wp test generate-stubs
	 *
	 * @param array $args
	 * @param array $assoc_args
	 */
	public function __invoke( $args, $assoc_args ) {
		$stub_content = $this->get_stub_content();
		$project_root = dirname( __DIR__, 2 ); // Fix: Use correct depth for project root
		$output_file = $project_root . '/wp2-test-stubs.php';
		if ( file_put_contents( $output_file, $stub_content ) === false ) { // Fix: Strict comparison for error check
			\WP_CLI::error( "Could not write to file: $output_file" );
			return;
		}
		\WP_CLI::success( "IDE stub file created: $output_file" );
		\WP_CLI::line( "Please include this file in your IDE's settings for static analysis." );
	}
	private function get_stub_content(): string {
		return <<<PHP
<?php
// This file is auto-generated by WP2 Test. Do not edit directly.
// It provides function stubs for better IDE static analysis.

namespace {

if (!function_exists('get_option')) {
    /**
     * @param string \$option
     * @param mixed \$default
     * @return mixed
     */
    function get_option(\$option, \$default = false) {}
}
if (!function_exists('update_option')) {
    /**
     * @param string \$option
     * @param mixed \$value
     * @param bool|string \$autoload
     * @return bool
     */
    function update_option(\$option, \$value, \$autoload = null) {}
}
if (!function_exists('add_action')) {
    /**
     * @param string \$tag
     * @param callable \$function_to_add
     * @param int \$priority
     * @param int \$accepted_args
     */
    function add_action(\$tag, \$function_to_add, \$priority = 10, \$accepted_args = 1) {}
}
if (!function_exists('apply_filters')) {
    /**
     * @param string \$tag
     * @param mixed \$value
     * @return mixed
     */
    function apply_filters(\$tag, \$value) {}
}
if (!function_exists('is_wp_error')) {
    /**
     * @param mixed \$thing
     * @return bool
     */
    function is_wp_error(\$thing) {}
}
if (!class_exists('WP_Error')) {
    class WP_Error {
        public function __construct(\$code = '', \$message = '', \$data = '') {}
        public function get_error_message() {}
    }
}
// Add other common WordPress function stubs here...

} // end global namespace
PHP;
	}
}

